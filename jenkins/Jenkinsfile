pipeline {
    parameters {
        string(name: 'REGION', defaultValue: 'eu-central-1', description: 'AWS region for CloudFormation deployment')
        string(name: 'TEMPLATE_FILE_NAME', defaultValue: 'networks', description: 'Name of CloudFormation template file')
        string(name: 'GITHUB_REPO', defaultValue: 'eduardbalakh/AWSlabs', description: 'Repo with cloudformation templates')
        string(name: 'Stack_name', defaultValue: 'my-stack', description: 'Name of CloudFormation in AWS')
        string(name: 'Path_PARAMS', defaultValue: '', description: 'Name of CloudFormation in AWS')
        string(name: 'Path_to_template', defaultValue: 'ads-service/', description: 'Path to template in S3 bucket starting from https://s3.amazonaws.com/....')
    }

    agent any

    environment {
        AWS_REGION = "${params.REGION}"
        STACK_NAME = "${params.Stack_name}"
        GITHUB_REPO = "${params.GITHUB_REPO}"
        TEMPLATE_FILE = "${params.TEMPLATE_FILE_NAME}"
        PARAMS_FILE = "${params.TEMPLATE_FILE_NAME}-params.json"
        PIPELINE_FILE = 'Jenkinsfile'
        PARAMS_STRING = "${params.parameters}"
        PARAMS_PATH = "${params.Path_PARAMS}"
        DEFAULT_PATH_TO_S3 = 'https://s3.amazonaws.com/bucket-for-templates-54654645/'
        TEMPLATE_URL = "${Path_to_template}"
    }

    stages {
        stage('Hello') {
            steps {
                sh "echo HELLO WORLD"
            }

        }

        stage('Fetch Template') {
            steps {
                withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'), string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                    git branch: 'main', url: "https://github.com/${GITHUB_REPO}.git", credentialsId: 'Jenkins-token'
                    sh "cp CloudFormation/${TEMPLATE_FILE}.yaml ${WORKSPACE}/template.yaml"
                    //sh "cp CloudFormation/${PARAMS_FILE} ${WORKSPACE}/params.json"
                    sh '''
                    if [ -z "${PARAMS_PATH}" ]; then
                      echo "Parameter PARAMS_PATH is empty"
                    else
                      cp "${PARAMS_PATH}" ${WORKSPACE}/params.json
                    fi
                    '''
                    sh 'cat params.json'
                }
            }
        }

        stage('Validate Template') {
            steps {
                sh "/usr/local/bin/aws cloudformation validate-template --template-body file://${WORKSPACE}/template.yaml"
            }
        }


        stage('Create Stack with default parameters') {
            steps {
                withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'), string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                sh """
                    if aws cloudformation describe-stacks --stack-name ${STACK_NAME} >/dev/null 2>&1; then
                        echo "The stack already exists."
                        aws cloudformation update-stack \
                           --stack-name ${STACK_NAME} \
                           --template-url ${TEMPLATE_URL} \
                           --parameters file://${WORKSPACE}/params.json \
                           --capabilities CAPABILITY_NAMED_IAM \
                           --region ${AWS_REGION} || true
                    else
                        echo "The stack does not exist."
                        aws cloudformation create-stack \
                             --stack-name ${STACK_NAME} \
                             --template-body file://${WORKSPACE}/template.yaml \
                             --parameters file://${WORKSPACE}/params.json \
                             --capabilities CAPABILITY_NAMED_IAM \
                             --region ${AWS_REGION}
                    fi
                    """
                }
            }
        }

        stage('Wait for Stack Creation') {
            steps {
                withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'), string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh "aws cloudformation wait stack-create-complete --stack-name ${STACK_NAME} --region ${AWS_REGION}"
                }
            }
        }

        stage('Print Stack Outputs') {
            steps {
                withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'), string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh "aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query 'Stacks[].Outputs[]'"
                }
            }
        }
    }

    post {
        failure {
            sh "aws cloudformation delete-stack --stack-name ${STACK_NAME}"
        }
    }
}
