pipeline {
    parameters {
        string(name: 'REGION', defaultValue: 'eu-central-1', description: 'AWS region for CloudFormation deployment')
        string(name: 'TEMPLATE_FILE_NAME', defaultValue: 'networks', description: 'Name of CloudFormation template file')
        string(name: 'GITHUB_REPO', defaultValue: 'eduardbalakh/AWSlabs', description: 'Repo with cloudformation templates')
    }

    agent any

    environment {
        AWS_REGION = "${params.REGION}"
        STACK_NAME = 'my-stack'
        GITHUB_REPO = "${params.GITHUB_REPO}"
        TEMPLATE_FILE = "${params.TEMPLATE_FILE_NAME}"
        PARAMS_FILE = "${params.TEMPLATE_FILE_NAME}-params.json"
        PIPELINE_FILE = 'Jenkinsfile'
    }

    tools {
      awscli 'AWS CLI'
    }

    stages {
        stage('Hello') {
            steps {
                sh "echo HELLO WORLD"
            }

        }

        stage('Fetch Template') {
            steps {
                withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'), string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                    git branch: 'main', url: "https://github.com/${GITHUB_REPO}.git", credentialsId: 'Jenkins-token'
                    sh "cp CloudFormation/${TEMPLATE_FILE}.yaml ${WORKSPACE}/template.yaml"
                    sh "cp CloudFormation/${PARAMS_FILE} ${WORKSPACE}/params.json"
                }
            }
        }

        stage('Validate Template') {
            steps {
                sh "aws cloudformation validate-template --template-body file://${WORKSPACE}/template.yaml"
            }
        }

        stage('Create Stack') {
            steps {
                withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'), string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh """
                        aws cloudformation create-stack
                        --stack-name ${STACK_NAME}
                        --template-body file://${WORKSPACE}/template.yaml
                        --parameters file://${WORKSPACE}/params.json
                        --capabilities CAPABILITY_NAMED_IAM
                        --region ${AWS_REGION}
                    """
                }
            }
        }

        stage('Wait for Stack Creation') {
            steps {
                withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'), string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh "aws cloudformation wait stack-create-complete --stack-name ${STACK_NAME} --region ${AWS_REGION}"
                }
            }
        }

        stage('Print Stack Outputs') {
            steps {
                withCredentials([string(credentialsId: 'aws-access-key', variable: 'AWS_ACCESS_KEY_ID'), string(credentialsId: 'aws-secret-key', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh "aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query 'Stacks[].Outputs[]'"
                }
            }
        }
    }
}
