AWSTemplateFormatVersion : 2010-09-09
Parameters:
  BucketName:
    Type: String
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - ProcessingLambdaPermission
    Properties:
      BucketName: !Ref BucketName
      VersioningConfiguration:
        Status: "Enabled"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ProcessingLambdaFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .txt

  ProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ProcessingLambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${BucketName}'
      SourceAccount: !Ref AWS::AccountId

  ProcessingLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: getAndDeleteObjects
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketNotification
                  - s3:PutBucketNotification
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:PutObject
                  - s3:GetObjectVersion
                  - s3:GetObjectVersionTagging
                  - s3:GetObjectVersionTorrent
                  - s3:GetObjectVersionAcl
                  - s3:GetObjectVersionForReplication
                Resource:  !Sub 'arn:aws:s3:::${BucketName}/*'
        - PolicyName: getVersions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucketVersions
                Resource: !Sub 'arn:aws:s3:::${BucketName}'
              

  ProcessingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          console.log('Loading function');
          const aws = require('aws-sdk'); const fs = require("fs");
          const s3 = new aws.S3({ apiVersion: '2006-03-01' });

          exports.handler = async (event, context) => {
              console.log('Received event:', JSON.stringify(event, null, 2));

              // Get the object from the event and show its content type
              const bucket = event.Records[0].s3.bucket.name;
              const key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, ' '));
              const params = {
                  Bucket: bucket,
                  Key: key,
              };
              try {
                  const object = await s3.getObject(params).promise();
                  const versions = await s3.listObjectVersions({Bucket : bucket, Prefix: key}).promise();
                  console.log('CONTENT TYPE:', object.ContentType);
                  console.log('versions: ', versions)

                  if(versions.Versions.length < 2) {
                      console.log('Versions: ', versions);
                      const originalText = object.Body.toString();
                      const newText = originalText + 'new 1'; 
                      console.log('ORIGINAL: ' + originalText);
                      fs.writeFileSync('/tmp/' + key, newText);
                      const newFile = fs.readFileSync( '/tmp/' + key, 'utf8');
                      console.log('NEW: ' + newFile)
                      const paramsUp = {
                          Bucket: bucket,
                          Key: key,
                          Body: newFile
                      };

                      console.log('Let upload');
                       s3.upload(paramsUp, function(err, data) {
                          if (err) {
                              console.log(err);
                              throw err;
                          }
                          console.log(`File uploaded successfully. ${data.Location}`);
                      }).send();
                      console.log('Uploaded');
                  }
                  console.log('End of function');
                  return object.ContentType;
              } catch (err) {
                  console.log(err);
                  const message = `Error getting object ${key} from bucket ${bucket}. Make sure they exist and your bucket is in the same region as this function.`;
                  console.log(message);
                  throw new Error(message);
              }
          };

      Handler: index.handler
      Role: !GetAtt ProcessingLambdaExecutionRole.Arn
      Runtime: nodejs16.x
      MemorySize: 512
      Timeout: 120